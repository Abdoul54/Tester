services:
    laravel.test:
        build:
            context: ./vendor/laravel/sail/runtimes/8.4
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.4/app
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
            - minio
            - redis
            - rabbitmq

    # Fixed queue service to use PHP 8.4 (same as main app)
    queue:
        build:
            context: ./vendor/laravel/sail/runtimes/8.4
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.4/app
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
            - redis
        command: php artisan queue:work --verbose --tries=3 --timeout=90 --memory=512
        restart: unless-stopped

    pgsql:
        image: 'postgres:17'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './vendor/laravel/sail/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s

    minio:
        image: 'minio/minio:latest'
        ports:
            - '${FORWARD_MINIO_PORT:-9000}:9000'
            - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
        environment:
            MINIO_ROOT_USER: sail
            MINIO_ROOT_PASSWORD: password
            MINIO_BROWSER_REDIRECT_URL: 'http://localhost:8900'
            MINIO_SERVER_URL: 'http://localhost:9000'
            MINIO_PROMETHEUS_AUTH_TYPE: public
        volumes:
            - 'sail-minio:/data'
        networks:
            - sail
        command: 'minio server /data --console-address ":8900"'
        healthcheck:
            test:
                - CMD
                - mc
                - ready
                - local
            retries: 3
            timeout: 5s

    minio-setup:
        image: 'minio/mc:latest'
        depends_on:
            - minio
        networks:
            - sail
        entrypoint: "/bin/sh -c \"\n  sleep 10;\n  # 1) authenticate\n  mc alias set minio http://minio:9000 sail password;\n\n  # 2) check & create bucket if needed\n  if ! mc ls minio/local > /dev/null 2>&1; then\n    echo 'Bucket \"local\" not found – creating…';\n    mc mb minio/local;\n  else\n    echo 'Bucket \"local\" already exists';\n  fi;\n\n  # 3) make it publicly readable\n  mc anonymous set public minio/local;\n\n  echo 'MinIO local bucket is ready and public (sail/password).';\n\"\n"
        restart: 'no'

    pgadmin:
        image: dpage/pgadmin4
        ports:
            - '5050:80'
        environment:
            PGADMIN_DEFAULT_EMAIL: sail@admin.com
            PGADMIN_DEFAULT_PASSWORD: password
            PGADMIN_CONFIG_SERVER_MODE: 'False'
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
        networks:
            - sail
        depends_on:
            - pgsql
        volumes:
            - 'pgadmin-data:/var/lib/pgadmin'
            - './docker/pgadmin/servers.json:/pgadmin4/servers.json:ro'

    redis:
        image: 'redis:alpine'
        ports:
            - '${REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s

    rabbitmq:
        image: 'rabbitmq:4-management'
        hostname: rabbitmq
        ports:
            - '${FORWARD_RABBITMQ_PORT:-5672}:5672'
            - '${FORWARD_RABBITMQ_DASHBOARD_PORT:-15672}:15672'
        environment:
            RABBITMQ_DEFAULT_USER: '${RABBITMQ_USERNAME}'
            RABBITMQ_DEFAULT_PASS: '${RABBITMQ_PASSWORD}'
            RABBITMQ_DEFAULT_VHOST: '${RABBITMQ_VHOST}'
        volumes:
            - 'sail-rabbitmq:/var/lib/rabbitmq'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - rabbitmq-diagnostics
                - '-q'
                - ping
            retries: 3
            timeout: 5s

networks:
    sail:
        driver: bridge

volumes:
    sail-pgsql:
        driver: local
    sail-minio:
        driver: local
    pgadmin-data:
        driver: local
    sail-redis:
        driver: local
    sail-rabbitmq:
        driver: local