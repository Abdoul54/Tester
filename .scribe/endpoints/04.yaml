name: Posts
description: 'APIs for managing posts'
endpoints:
  -
    httpMethods:
      - GET
    uri: api/posts
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of posts with filtering, sorting, and searching capabilities.'
      description: |-
        This method supports advanced filtering options such as:
        - Exact match filters for status, user_id, category, language, and is_feature
        - Partial match filters for title and content
        - Custom scope filters (e.g., published)
        - Callback filters for tags and date ranges
        - Minimum view count filter
        - Sorting by various fields including user name
        - Including related user and user profile data
        - Pagination with customizable per_page parameter
        * Example request:
         GET /api/posts?filter[status]=published&filter[user_id]=1
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"You must be logged in to access this resource."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/posts
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created post.'
      description: |-
        This method validates the request data, generates a unique slug from the title,
        and creates a new post in the database.
        It also sets the published_at timestamp if the post is published without a specific date.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'Must not be greater than 255 characters.'
        required: true
        example: b
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      content:
        name: content
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: ''
        required: false
        example: archived
        type: string
        enumValues:
          - draft
          - published
          - archived
        exampleWasSpecified: false
        nullable: false
        custom: []
      thumbnail:
        name: thumbnail
        description: 'Must be an image. Must not be greater than 2048 kilobytes.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'Must not be greater than 50 characters.'
        required: false
        example:
          - 'n'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      is_featured:
        name: is_featured
        description: ''
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      language:
        name: language
        description: 'Must not be greater than 5 characters.'
        required: false
        example: g
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      category:
        name: category
        description: 'Must not be greater than 100 characters.'
        required: false
        example: z
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      title: b
      content: architecto
      status: archived
      tags:
        - 'n'
      is_featured: false
      language: g
      category: z
    fileParameters:
      thumbnail: null
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/posts/{id}'
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified post by ID.'
      description: |-
        This method retrieves a single post with its related user and user profile data.
        It also increments the view count for the post.
        Example request:
        GET /api/posts/1?include=user,user.profile&fields[posts]=id,title,content,slug,status,thumbnail,tags,published_at,is_featured,view_count,comment_count,language,category,created_at,updated_at&fields[users]=id,name,email
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the post.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"You must be logged in to access this resource."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/posts/{id}'
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified post.'
      description: |-
        This method validates the request data, generates a new slug if the title is updated,
        and updates the post in the database.
        It also sets the published_at timestamp if the status changes to published without a specific date
        Example request:
        PUT /api/posts/1
        {
         "title": "Updated Post Title",
        "content": "Updated content for the post.",
        "status": "published",
        "thumbnail": "https://example.com/updated-image.jpg",
        "tags": ["updated-tag1", "updated-tag2"],
        "published_at": "2024-01-02 12:00:00",
        "is_featured": true,
        "language": "en",
        "category": "Updated Category"
        }
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the post.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/posts/{id}'
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete the specified post.'
      description: |-
        This method attempts to find the post by ID and delete it.
        If the post is not found or deletion fails, it returns a 404 error.
        Example request:
        DELETE /api/posts/1
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the post.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/posts/featured/list
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Get featured posts.'
      description: |-
        This method retrieves posts that are marked as featured,
        allowing for sorting and including related user data.
        It supports pagination and allows sorting by various fields.
        Example request:
        GET /api/posts/featured?per_page=5&sort=-published_at&include=user
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"You must be logged in to access this resource."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/posts/category/{category}'
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Get posts by category.'
      description: |-
        This method retrieves posts that belong to a specific category,
        allowing for filtering, sorting, and pagination.
        It supports advanced filtering options such as:
        - Partial match filters for title
        - Exact match filters for language and is_featured
        - Callback filters for tags
        Example request:
        GET /api/posts/category/technology?per_page=10&filter[title]=Laravel&sort=-published_at&include=user
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      category:
        name: category
        description: 'The category.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      category: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"You must be logged in to access this resource."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/posts/search/query
    metadata:
      groupName: Posts
      groupDescription: 'APIs for managing posts'
      subgroup: ''
      subgroupDescription: ''
      title: 'Search for posts.'
      description: |-
        This method allows users to search for posts by title, content, or tags.
        It supports advanced filtering options such as:
        - Exact match filters for category, language, and is_featured
        - Sorting by title, published_at, view_count, and comment_count
        Example request:
        GET /api/posts/search?q=Laravel&per_page=10&filter[category]=programming&sort=-published_at&include=user
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      q:
        name: q
        description: 'Must be at least 2 characters.'
        required: true
        example: bngz
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      q: bngz
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"You must be logged in to access this resource."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
